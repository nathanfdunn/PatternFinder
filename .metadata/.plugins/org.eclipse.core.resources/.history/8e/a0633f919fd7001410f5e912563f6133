package tests;

import gui.TokenStreamDisplayer;
import patternDetection.EvaluationObject.EvaluationSettings;
import patternDetection.SimpleTokenStream;
import behaviorClassification.CsvToTable;
import behaviorClassification.RawTimeSeriesTable;

public class TamboraTest {

	private static String file = "/Users/nathandunn/Desktop/tamboraTable.csv";
	
	public static void main(String[] args) {
		poorPerformance();
//		double start = 1650;
//		double end = 2000;
//		
////		Object[] things = getStreamAndTable(file, start, end, 10.0);
//		
////		Object[] things = getStreamAndTable("/Users/nathandunn/Desktop/nfdunn_US ITASE_2000_1.csv",start,end,10.0);
//		
//		RawTimeSeriesTable table = (RawTimeSeriesTable)things[0];
//		SimpleTokenStream sts = (SimpleTokenStream)things[1];
//		
//		EvaluationSettings settings = new EvaluationSettings(2,0.25,1);
//		
//		ItaseSeasonal.showTokensAndPatterns(sts, table, settings);
	}
	
	
	
//	public static TokenStreamDisplayer getDisplayer(RawTimeSeriesTable table,
//			SimpleTokenStream sts){
//		
//	}
	
//	private static void stableIons(){
//		String file = "/Users/nathandunn/Desktop/nfdunn_US ITASE_2000_1.csv";
//		
//	}

	private static void poorPerformance(){
		double start = 1717.545 - 2;
		double end = 1917.545;
		
		Object[] things = getStreamAndTable(file, start, end, 10.0);
		RawTimeSeriesTable table = (RawTimeSeriesTable)things[0];
		SimpleTokenStream sts = (SimpleTokenStream)things[1];
		
		ItaseSeasonal.showTokensAndPatterns(sts, table, null);
	}
	
	public static Object[] getStreamAndTable(String fileName, double start,
			double end, int numChunks){
		RawTimeSeriesTable table = CsvToTable.readCsv(fileName);
		table = table.subTable(start, end);
		SimpleTokenStream sts = Objs.tokenizer.tokenize(table, numChunks, start, end);
		return new Object[]{table, sts};
	}

	public static Object[] getStreamAndTable(String fileName, double start,
			double end, double chunkWidth){
		RawTimeSeriesTable table = CsvToTable.readCsv(fileName);
//		Pnt.pnt(table);
//		Pnt.pnt(table.getTimeInd());
		Pnt.pnt(start);
		Pnt.pnt(end);

		table = table.subTable(start, end);
		SimpleTokenStream sts = Objs.tokenizer.tokenize(table, chunkWidth, start, end);
		return new Object[]{table, sts};
	}
	
	

}
