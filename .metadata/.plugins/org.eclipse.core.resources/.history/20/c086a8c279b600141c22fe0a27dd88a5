package patternDetection;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

/**
 * 
 * @author nathandunn
 * Provides static methods for transforming the intermediary text file of tokens
 *  into a token stream
 */
public class FileTranslator {

	public static TokenStream translateFile(String fileName) {
		TokenStream out = new TokenStream();
		try {
			BufferedReader br = new BufferedReader(new FileReader(fileName));
			String line = br.readLine();		//Labels
			
			String[] labels = line.split(" +");
			ArrayList<ArrayList<Token>> tokenLists = new ArrayList<ArrayList<Token>>();
			int time = 0;
			while ((line = br.readLine()) != null) {
				String[] behaviors = line.split(" +");
				for (int i=0; i<behaviors.length; i++){
					Token t = new Token(labels[i], translate(behaviors[i]), time);
					tokenLists.get(i).add(t);
				}
				//out.addToken(createCompToken(values, labels));
				time++;
			}
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return out;
	}
	
	private static Behavior translate(String rep){
		if ("SPIKE".equals(rep)){
			return Behavior.SPIKE;
		}else if ("INC".equals(rep)){
			return Behavior.INC;
		}else if ("FLAT".equals(rep)){
			return Behavior.FLAT;
		}else if ("DEC".equals(rep)){
			return Behavior.DEC;
		}else if ("DIP".equals(rep)){
			return Behavior.DIP;
		}else{	//if "NULL_".equals(rep)){
			return Behavior.UNK;
		}
	}
	
	
	public static CompositeTokenStream translateFile(){
		return translateFile("TokenStream.txt");
	}
	
	
	private static CompositeToken createCompToken(String[] values, String[] labels){
		TimeAttribute time = new TimeAttribute(
				Double.parseDouble(values[0]),
				Double.parseDouble(values[1]),
				null
				);
		
		ArrayList<QuantityToken> qTokens = new ArrayList<QuantityToken>();
		for (int i=2; i<labels.length; i++){
			String name = labels[i];
			BehaviorToken bt = stringToToken(values[i]);
			QuantityToken qt = new QuantityToken( name, bt );
			qTokens.add(qt);
		}
		
		return new CompositeToken(time, qTokens);
	}

	/*
	private static void printArray(String[] s){
		System.out.println("length ="+s.length);
		for (String s2 : s){
			System.out.println(s2);
		}
		System.out.println();
	}*/
	
	private static BehaviorToken stringToToken(String s){
		if (s.equals("-2")){
			return new ExtremeBehavior(-4);
		}else if (s.equals("2")){
			return new ExtremeBehavior(4);
		}else if(s.equals("-1")){
			return new SteadyBehavior(-0.5);
		}else if(s.equals("1")){
			return new SteadyBehavior(0.5);
		}else{
			return new FlatBehavior();
		}
	}
}
