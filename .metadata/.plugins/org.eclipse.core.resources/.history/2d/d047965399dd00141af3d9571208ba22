package ui;

import java.util.HashMap;

import patternDetection.SimpleTokenStream;
import ui.AppVar.AppNull;

public class CommandApp {

	private IInputReader in;
	private boolean quit;
	private HashMap<String, AppVar<? extends Object>> variables;
	private IAppOutput out;
//	private static final AppVar<? extends Object> 
	
	public void execute(String cmd){
		
		
	}
	
	
	
//	public AppVar<? extends Object> eval(String functionName, String[] args){
//		
//	}
	
	
	
	
	public AppVar<? extends Object> eval(String s){
		int lParenInd = s.indexOf('(');
		int rParenInd = s.lastIndexOf(')');
		
		if (lParenInd == -1 || rParenInd == -1){
			//Do stuff for literal eval
		}else{
			if (lParenInd != 0 || rParenInd != s.length()-1)
				throw new Error("Bad input");
			//Do stuff for expression evaluation
		}
	}
	
	private AppVar<? extends Object> varEval(String s){ 
		if (isVariable(s)) {
			return variables.get(s);
		} else {
			showWarning("Variable '"+s+"' is undefined");
			return AppNull.NULL;
		}
	}
	
	
	private boolean isVariable(String name){
		return variables.containsKey(name);
	}
	
	public void showWarning(String warningMessage){
		out.print("Warning: "+warningMessage);
	}
	
	public void showError(String errorMessage){
		out.print("Error: "+errorMessage);
	}
	
	public void run(){
		while (!quit){
			String cmd = in.getInput();
			execute(cmd);
		}
	}
	
	private String[] parseCommand(String cmd){
		return cmd.split("\\s+");
	}
	
	private AppVar<? extends Object> set(String varName, AppVar<? extends Object> obj ){
		variables.put(varName, obj);
		return obj;
	}
	
	private void quit(){
		quit = true;
	}
	
//	private AppVar<SimpleTokenStream> tokenize()
	
	
	
}




