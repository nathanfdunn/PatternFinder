package behaviorClassification;


public class FeatureTable extends DataTable {
	
	private String[] classifications;
	
	public FeatureTable(double[][] entries, String[] headers, String[] classifications){
		super(entries, headers);
		this.classifications = classifications;
	}
	
	public FeatureTable(double[][] entries, String[] headers){
		this(entries, headers, null);
	}
	
	
	
	
//	public FeatureTable(double[][] entries) {
//		this(entries, null);
//	}
	


	public FeatureTable(ClassifiedChunkList list, FeatureExtractor fe){
		super( new double[fe.numFeatures()][list.getNumChunks()],
				list.getQuantities() );
		
		
		
		//double[][] entries = new double[fe.numFeatures()][list.getNumChunks()];
	}
	
	public void setClassifications(String[] classifications) {
		this.classifications = classifications;
	}

	//Returns a vector of means for each data column
	public double[] getMeanVec(){
		double[] out = new double[super.getNumCols()];
		for (int i=0; i<out.length; i++)
			out[i] = MyMath.mean(entries[i]);
		return out;
	}
	
	//Returns a vector of standard deviations for each data column
	public double[] getStdVec(){
		double[] out = new double[getNumCols()];
		for (int i=0; i<out.length; i++)
			out[i] = MyMath.std(entries[i]);
		return out;
	}
	
	//Creates a version of this table where each column is normalized
	public FeatureTable getScaledTable(){
		double[][] newEntries = new double[getNumCols()][getNumRows()];
		for (int i=0; i<getNumCols(); i++)
			newEntries[i] = MyMath.scale(this.entries[i]);
		
		return new FeatureTable(newEntries, this.getHeaders(), this.classifications);
	}
	

	
}
