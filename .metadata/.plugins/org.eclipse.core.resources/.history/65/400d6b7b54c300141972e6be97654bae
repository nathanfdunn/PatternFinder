package behaviorClassification;


public class MyStats {

	public static double mean(double[] data){
		if (data.length <= 0)
			throw new Error("Can't take mean of 0 values");
		double sum=0;
		for (double val : data)
			sum+=val;
		
		return sum/data.length;
	}
	
	public static double variance(double[] data){
		if (data.length <= 1)
			throw new Error("Need at least 2 values for variance");
		double sum = 0;
		double mu = mean(data);
		for (double val : data)
			sum += Math.pow(val-mu, 2);
		
		return sum/(data.length - 1);
	}
	
	public static double std(double[] data){
		return Math.sqrt(variance(data));
	}
	
	//Returns an array of the z-scores of the data
	public static double[] scale(double[] data){
		double mean = mean(data);
		double std = std(data);
		return mult(add(data, -mean), 1/std);
	}
	
	public static double[] sub(double[] vec1, double[] vec2){
		if (vec1.length != vec2.length)
			throw new Error("Vectors must be same length");
		double[] out = new double[vec1.length];
		for (int i=0; i<vec1.length; i++)
			out[i] = vec1[i] - vec2[i];
		return out;
	}
	
	public static double[] add(double[] data, double a){
		double[] out = new double[data.length];
		for (int i=0; i<data.length; i++)
			out[i] = data[i] + a;
		return out;
	}
	
	public static double[] mult(double[] data, double a){
		double[] out = new double[data.length];
		for (int i=0; i<data.length; i++)
			out[i] = data[i] * a;
		return out;
	}
	
	public static double distance(double[] vec1, double[] vec2){
		if (vec1.length != vec2.length)
			throw new Error("Vectors must be same length");
		double sum = 0;
		for (int i=0; i<vec1.length; i++){
			
		}
	}
	
}
