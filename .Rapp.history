s2=function(){source('~/Programming/PatternFinder/Classifier.r', chdir = TRUE)
}
s2()
buildModel(blah2)
traceback()
s2();buildModel(blah2)
NULL
skewness(NULL)
s2();buildModel(blah2)
mychunk
typeof(mychunk)
typeof(mychunk$rawValues)
s2();buildModel(blah2)
features
s2();buildModel(blah2)
features
s2();buildModel(blah2)
myfeat
typeof(myfeat)
s2();buildModel(blah2)
features
x=list()
x = c(x, 8)
x
x=list()
x = c(x, runif(10))
x
x = c(x, list(runif(10)))
x
s2();buildModel(blah2)
frame
frame$sk
typeof(frame$sk)
typeof(frame$type)
s2();buildModel(blah2)
s2();buildModel(blah2)->k
summary(k)
blah2
s()
s2();buildModel(blah2)->k
k
length(frame)
frame
s2();buildModel(blah2)->k
featureExtractor
featureExtractor(runif(100))
featureExtractor(runif(100))->k
as.list(k)
data.frame(as.list(k))
data.frame(as.list(k))->l
l
pairs(l)
s2();buildModel(blah2)->k
e
e = featureExtractor(runif(100))
predict(k, e)
s2();buildModel(blah2)->k
predict(k, e)
s2();buildModel(blah2)->k
s2()
blah2
s2();buildModel(blah2)->k
traceback()
s2();buildModel(blah2)->k
library(e1071)
s2();buildModel(blah2)->k
traceback()
s2();buildModel(blah2)->k
traceback()
s2()
s2
buildModel(blah2)
source('~/Programming/PatternFinder/Classifier.r', chdir = TRUE)
s2
predict
s2
ls()
rm(list=ls())
ls()
predict
source('~/Programming/PatternFinder/Classifier.r', chdir = TRUE)
source('~/Programming/PatternFinder/Classifier.r', chdir = TRUE)
source('~/Programming/PatternFinder/Classifier.r', chdir = TRUE)
s2 = function(){source('~/Programming/PatternFinder/Classifier.r', chdir = TRUE)}
s2()
source('~/Programming/PatternFinder/Chunker.r', chdir = TRUE)
frame
source('~/Programming/PatternFinder/Chunker.r', chdir = TRUE)
s=function(){source('~/Programming/PatternFinder/Chunker.r', chdir = TRUE)}
s()
s()
s()
classifyTest
buildMOdel(classifyTest)
buildModel(classifyTest)
s()
s()
buildModel(classifyTest)
buildModel(classifyTest)->l
myPredict(l, runif(100), 1:100)
myPredict(l, runif(100), 1:100)
myPredict(l, runif(100), 1:100)
myPredict(l, runif(100), 1:100)->p
typeof(p)
print(p)
s()
s()
s()
s()
buildModel(classifyTest)
buildModel(classifyTest)
s2
s2()
buildModel(classifyTest)
save(classifyTest, "ClassificationTest")
save(classifyTest, file="ClassificationTest")
blah = load("ClassificationTest")
blah
blah
saveRDS
saveRDS(classifyTest, "MyTest")
blah = readRDS("MyTEst")
blah = readRDS("MyTest")
blah
saveRDS(classifyTest, "MyTest.rds")
blah = readRDS("MyTest.rds")
blah
s2()
classifyTest
test2 = classifyTest
names(test2)
for (i in 1:length(test2[["Ca..ug.L."]])){test2[["Ca..ug.L."]] [[i]] [["rawTimes"]] = test2[["TimeChunks"]] [[i]] }
test2
train = test2[["Ca..ug.L."]]
train
train = train[1:20]
test = test2[21:80]
test = test2[21:100]
test
train
test2
test = test2[["Ca..ug.L."]][21:100]
length(test)
length(train)
verify(train,test)
traceback()
features
test = test2
test2[["Ca..ug.L."]][1:20] = NULL
length(test2[["Ca..ug.L."]])
verify(train,test2)
features
names(test2)
train = classifyTest
train[["Ca..ug.L."]][21:100] = NULL
verify(train, test2)
train[["NumChunks"]] = 20
verify(train, test2)
out
res=verify(train, test2)
res
s2(); res = verify(train, test2)
s2(); res = verify(train, test2)
pred
verify
s2(); res = verify(train, test2)
traceback()
s2(); res = verify(train, test2)
traceback()
s2(); res = verify(train, test2)
s2(); res = verify(train, test2)
s2(); res = verify(train, test2)
mychunk
mytimes
s2(); res = verify(train, test2)
features
s2(); res = verify(train, test2)
s2()
s()
s()
s()
s()
s()
s()
s()
cc
mychunk
names(mychunk)
s()
s()
s()
plot(0)
dev.new()
dev.next(which = dev.cur())
plot(0)
dev.next(which = dev.cur())
plot(1)
dev.prev(which = dev.cur())
plot(1)
dev.list()
typeof(dev.list())
dev.next()
dev.next()
dev.next()
dev.prev()
dev.prev()
dev.cur()
dev.cur()
dev.cur()
dev.set(which=dev.next())
dev.set(which=dev.next())
dev.set(which=dev.next())
dev.set(which=dev.next())
dev.set(which=dev.next())
dev.set(which=dev.next())
plot(0)
dev.set(which=dev.next())
plot(1)
s()
S()
s()
classifyTest
buildModel(classifyTest)
spline
?spline
example(spline)
warnings()
buildModel(classifyTest)
.jinit()
library(rJava)
.jinit()
.new
.jnew
.jnew("java/lang/String", "Hello")
.jnew("java/lang/String", "Hello")->k
k$length()
pairs2
s2()
featureClassifier
featureExtractor
s()
featureExtractor
buildModel(classifyTest)
myframe
pairs(myframe)
myframe
buildModel(classifyTest)
s2()
s()
s()
