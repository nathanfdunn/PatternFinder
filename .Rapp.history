plot(f)
read.table(~/Programming/PatternFinder/PatternDetection/Eval0.txt)
read.table("~/Programming/PatternFinder/PatternDetection/Eval0.txt")
read.table("~/Programming/PatternFinder/PatternDetection/Eval0.txt")->vals
hist(vals[[1]])
read.table("~/Programming/PatternFinder/PatternDetection/Eval0.txt")[[1]]->vals
vals = which(vals > -1)
hist(vals)
vals
read.table("~/Programming/PatternFinder/PatternDetection/Eval0.txt")[[2]]->vals
vals
read.table("~/Programming/PatternFinder/PatternDetection/Eval0.txt")->vals
length(vals)
vals
colnames(vals)
vals[[1]]
blah = vals[[1]]
hist(blah)
blah = which(blah > -1)
hist(blah)
blah
vals
vals[[1]]
myblah=vals[[1]]
myblah
vals
blah = vals[[1]][which(vals[[1]]>-1)]
hist(blah)
max(blah)
min(blah)
qqplot(blah)
example(qqplot)
qqnorm(blah)
qqplot(blah)
q=function(n){out = 0; for (i in 2:n){out = out + 1/(i*log(i)^2)} return(out)}
q=function(n){out = 0; for (i in 2:n){out = out + 1/(i*log(i)^2)}; return(out)}
q(10)
q(100)
q(10000)
q(100000)
plot(runif(1000), runif(1000), type = 'l')
x = c(rep(-1, 500), rep(1, 500))
y=c(rep(-1, 500), rep(1, 500))
cor(x,y)
scale(x)
x1 = 1:1000
y1=1:1000
cor(x1,y1)
scale(x1)
sqrt(3)
sum(scale(rexp(1000))>4)
hist(scale(rexp(1000)))
dat=rexp(1000)
mean(dat)
std(dat)
sd(dat)
sum(scale(rnorm(1000))>4)
sum(scale(rnorm(100000))>4)
hist(rnorm(100000))
dat=rnorm(100000)
mean(dat)
sd(dat)
qSolve = function(n=20, qYear=ifelse(is.na(qInd),0.8,NA), qInd=NA)
{if (is.na(qYear)){return(qInd^n)}; if(is.na(qInd)){return(qYear^(1/n))}   }
qSolve()
0.8^0.05
0.98^20
0.99^20
qSolve(100, 0.95)
1/(1-qSolve(100, 0.95)
)
qSolve(100, 1-0.05*0.05)
odds=function(q){return 1/(1-q)}
odds=function(q){return() 1/(1-q))}
odds=function(q){return(1/(1-q))}
odds(qSolve(100, 1-0.05*0.05))
odds(qSolve(200, 1-0.05*0.05))
odds(qSolve(200, .95))
qSolve()
odd(qSolve())
odds(qSolve())
odds(qSolve(n=100))
odds(qSolve(qYear=0.15))
ef2=function(...)#Effective effectiveness
{}
ef2(4,6,7)
ef2=function(...)#Effective effectiveness
{for (i in ...){print(i)}}
ef2()
ef2=function(...)#Effective effectiveness
{for (i in list(...)){print(i)}}
ef2()
ef2(4,56,7)
ef2=function(...)#Effective effectiveness
{out=1;for (i in list(...)){out=out*(1-i)}; return(1-out)}
ef2(1,1,1)
ef2(1,0.9)
ef2(0.9,0.9)
ef2(0.8,0.8)
qSolve(qYear=ef2(0.8,0.8))
qSolve(n=50,qYear=ef2(0.8,0.8))
qSolve(n=50,qYear=ef2(0.8,0.9))
odds(qSolve(n=50,qYear=ef2(0.8,0.9)))
odds(qSolve(n=100,qYear=ef2(0.8,0.9)))
odds(qSolve(n=1000,qYear=ef2(0.8,0.9)))
odds(qSolve(n=100,qYear=ef2(0.9,0.95)))
odds(qSolve(n=100,qInd=ef2(0.9,0.95)))
qSolve(n=100,qInd=ef2(0.9,0.95))
qSolve(n=800,qInd=ef2(0.9,0.95))
qSolve(n=800,qYear=ef2(0.9,0.95))
runif(1)<1/2000
x=F
while(!x){x=runif(1)<1000;readline()}
while(!x){x=(runif(1)<1000);readline()}
x=F
while(!x){x=(runif(1)<1000);readline()}
x=F; i=0; while(!x){x=(runif(1)<1000){readline(i)}}
x=F; i=0; while(!x){x=(runif(1)<1000);readline(i)}
x
x=F; i=0; while(!x){x=(runif(1)<1/1000);readline(i)}
x=F; i=0; while(!x){x=(runif(1)<1/1000);readline(i);i=i+1}
x=F; i=0; while(!x){x=(runif(1)<1/1000);i=i+1}
i
x=F; i=0; while(!x){x=(runif(1)<1/1000);i=i+1};i
rgeom(1,1/1000)
hist(rgeom(1000,1/1000))
min(rgeom(1000,1/1000))
min(rgeom(1000,1))
regoem(100,0.5)
rgoem(100,0.5)
rgeom(100,0.5)
rgeom(100,1/1000)
version()
license()
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-2.0")
sessionInfo()
getRversion()
getRVersion()
packinfo = installed.packages()
packinfo
rjava
trial=function(){suc=0; consec=0; while(consec<3){if(runif(1)<0.6){suc=suc+1;consec=consec+1}else{consec=0}}return(suc)}
trial=function(){  suc=0; consec=0; while(consec<3) { if(runif(1)<0.6) {suc=suc+1;consec=consec+1}else{consec=0}  }return(suc)   }
trial=function(){
suc=0;
consec=0;
while(consec<3){
if(runif(1)<0.6){
suc=suc+1;
consec=consec+1
}else{
consec=0
}
return(suc)
}
trial()
out=rep(0,1000)
for(i in 1:1000){out[i]=trial()}
out
hist(out)
sum(out==8)
sum(out==8)/1000
plot
plot(c(1,5,3,8,5),type='l')
factorize(5)
primes(5)
3721/3
for (i in 1:sqrt(3721)){print(i)}
for (i in 1:sqrt(3721)){if (3721%%i==0){print(i)}}
61*61
5[1]
5[1][1[1[1[1[1]]]]]
5[1][1[1[1[1[1]]]]][1][1][1][1][1][1][1][1][1][1][1]
read.table("~/Programming/DataSets_R/ITASE/ITASEEdit.txt")->i
i
colnames(i)
read.table("~/Programming/DataSets_R/ITASE/ITASEEdit.txt",T)->i
colnames(i)
T, F
T
T[1][1]
x=list()
x[["hello"]]=c(1,2,3,5)
x[["bye"]]=c(5,3,6)
x
x$hello
x[["hello"]]
x["hello"]
"hello"[1]
"hello"[2]
NULL[1]
NULL[2]
NULL[0]
NA[0]
logical(2)
logical(0)
logical
c(3,4,5,"hll")
c(3,4,5,"hll")[1]
c(3,4,5,"hll")[1]
x=list()
x[["time"]]=849
x[["blah"]]=48
x
x[[1]]
x[[2]]
paste(c("hello", "bye", "hahaahahah", "sqrt"), sep="\t")
paste(c("hello", "bye", "hahaahahah", "sqrt"), sep="\t", collapse=T)
paste(c("hello", "bye", "hahaahahah", "sqrt"), collapse="\t")
paste(c("hello", "bye", "hahaahahah", "sqrt"), collapse="\t")->strings
write(strings,file="test.txt")
`[[]]`
x=rep(10)
x
x[[6]]
x[[1]]
x[[2]]
x[[2]]=6
x
x[["hellO"]]
x[["hellO"]]=7
x
source("TokenizeScript.r")
setwd("~/Programming/PatternFinder")
source("TokenizeScript.r")
parallelTokenize("ndunn_GISP2", 14, outFileName="GISP2_Test")
source("TokenizeScript.r")
parallelTokenize("ndunn_GISP2", 14, outFileName="GISP2_Test")
write("blah", "../superBlah.txt")
parallelTokenize("nfdunn_GISP2", 14, outFileName="GISP2_Test")
traceback()
source("TokenizeScript.r");parallelTokenize("nfdunn_GISP2", 14, outFileName="GISP2_Test")
source("TokenizeScript.r");parallelTokenize("nfdunn_GISP2", 14, outFileName="GISP2_Test")
traceback()
source("TokenizeScript.r");parallelTokenize("nfdunn_GISP2", 14, outFileName="GISP2_Test")
median(NULL)
length(NULL)
source("TokenizeScript.r");parallelTokenize("nfdunn_GISP2", 14, outFileName="GISP2_Test")
traceback()
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
source("TokenizerTester.r")
